cloudwatch_metrics_collector:
  ros__parameters:

    # An optional metric namespace parameter. If provided it will set the namespace for all metrics provided by this node to
    # the provided value. If the node is running on AWS RoboMaker, then the provided launch file will ignore this parameter in
    # favor of the namespace specified by the AWS RoboMaker ecosystem
    aws_metrics_namespace: "ros_metrics_collector"

    # An optional list of topics to listen to, where the message the type is ros_monitoring_msgs/msg/MetricList.
    # If not provided or is empty the node will just listen on the global "metrics" topic.
    # If this list is not empty then the node will not subscribe to the "metrics" topic and will only subscribe to the
    # topics in the list.
    # aws_monitored_metric_topics: ["metrics"]

    # An optional list of topics to listen to, where the message the type is metrics_statistics_msgs/msg/MetricsMessage.
    # If not provided or is empty the node will just listen on the global "system_metrics" topic.
    # If this list is not empty then the node will not subscribe to the "system_metrics" topic and will only subscribe to the
    # topics in the list.
    # system_metrics_topics: ["system_metrics"]

    # The absolute path to a folder that all offline metric files will be stored in
    storage_directory: "~/.ros/cwmetrics/"

    # The maximum size of all files in offline storage in KB
    storage_limit: 1048576

    # This is the AWS Client Configuration used by the AWS service client in the Node. If given the node will load the
    # provided configuration when initializing the client.
    aws_client_configuration:
        # Specifies where you want the client to communicate. Examples include us-east-1 or us-west-1. You must ensure that
        # the service you want to use has an endpoint in the region you configure.
        region: "us-west-2"

        # Built in the constructor and pulls information from your operating system. Do not alter the user agent.
        #user_agent: ""

        # Use this to override the http endpoint used to talk to a service. If you set this, you must also set authenticationRegion.
        #endpoint_override: ""

        # These settings allow you to configure a proxy for all communication with AWS. Examples of when this functionality
        # might be useful include debugging in conjunction with the Burp suite, or using a proxy to connect to the Internet.
        #proxy_host: ""
        #proxy_port: 0
        #proxy_user_name: ""
        #proxy_password: ""

        # Enables you to tell the HTTP client where to find your SSL certificate trust store (for example, a directory
        # prepared with OpenSSL's c_rehash utility). You shouldn't need to do this unless you are using symlinks in your
        # environment. This has no effect on Windows or OS X.
        #ca_path: ""
        #ca_file: ""

        # Values that determine the length of time, in milliseconds, to wait before timing out a request. You can increase
        # this value if you need to transfer large files, such as in Amazon S3 or Amazon CloudFront.
        request_timeout_ms: 2000
        connect_timeout_ms: 2000
        no_retry_strategy: true

        # The maximum number of allowed connections to a single server for your HTTP communications. The default value is 25.
        # You can set this value as high as you can support the bandwidth. We recommend a value around 25.
        #max_connections: 25

        # Use dual stack endpoint in the endpoint calculation. You must ensure that the service you want to use supports ipv6 in the region you select.
        #use_dual_stack: false

        # Enable adjustment for clock skew
        #enable_clock_skew_adjustment: true

        # If set to true the http stack will follow redirect codes
        #follow_redirects: false

        # Specifies whether to enable SSL certificate verification. If necessary, you can disable SSL certificate verification by setting verifySSL to false.
        #verify_SSL: true

    # This is the storage resolution level for presenting metrics in CloudWatch.
    # Valid values are 1 and 60. Setting this to 1 specifies this metric as a
    # high-resolution metric, so that CloudWatch stores the metric with sub-minute
    # resolution down to one second. Setting this to 60 specifies this metric as a
    # regular-resolution metric, which CloudWatch stores at 1-minute resolution.
    # Currently, high resolution is available only for custom metrics. For more
    # information about high-resolution metrics, see http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html
    storage_resolution: 60
